diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0d2d8ce..ca9c749 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -9,10 +9,13 @@ if(APPLE AND NOT DEFINED CMAKE_MACOSX_RPATH)
   set(CMAKE_MACOSX_RPATH true)
 endif()
 
-# shared libs currently not supported on Windows
-if(WIN32 AND NOT CAF_BUILD_STATIC_ONLY)
-  message(STATUS "CAF currently only supports static-only builds on Windows")
-  set(CAF_BUILD_STATIC_ONLY yes)
+if(WIN32)
+  if("${CMAKE_VERSION}" VERSION_GREATER 3.4.0)
+    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS true)
+  elseif(NOT CAF_BUILD_STATIC_ONLY)
+    message(STATUS "Please upgrade to CMake 3.4 to build DLLs. Building static libraries instead.")
+    set(CAF_BUILD_STATIC_ONLY yes)
+  endif()
 endif()
 
 ################################################################################
diff --git a/libcaf_core/CMakeLists.txt b/libcaf_core/CMakeLists.txt
index 17280c9..659b838 100644
--- a/libcaf_core/CMakeLists.txt
+++ b/libcaf_core/CMakeLists.txt
@@ -102,6 +102,7 @@ add_custom_target(libcaf_core)
 
 # build shared library if not compiling static only
 if (NOT CAF_BUILD_STATIC_ONLY)
+  add_definitions(-DCAF_CORE_BUILD_SHARED -DCAF_CORE_EXPORTS)
   add_library(libcaf_core_shared SHARED ${LIBCAF_CORE_SRCS} ${LIBCAF_CORE_HDRS})
   target_link_libraries(libcaf_core_shared ${LD_FLAGS})
   set_target_properties(libcaf_core_shared
@@ -109,12 +110,13 @@ if (NOT CAF_BUILD_STATIC_ONLY)
                         SOVERSION ${CAF_VERSION}
                         VERSION ${CAF_VERSION}
                         OUTPUT_NAME caf_core)
-  if (CYGWIN)
-    install(TARGETS libcaf_core_shared RUNTIME DESTINATION bin)
-  elseif (NOT WIN32)
-    install(TARGETS libcaf_core_shared LIBRARY DESTINATION lib)
-  endif()
+  install(TARGETS libcaf_core_shared
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+  )
   add_dependencies(libcaf_core_shared libcaf_core)
+  add_definitions(-DCAF_CORE_BUILD_SHARED -DCAF_CORE_EXPORTS)
 endif ()
 
 # build static library only if --build-static or --build-static-only was set
@@ -122,9 +124,7 @@ if (CAF_BUILD_STATIC_ONLY OR CAF_BUILD_STATIC)
   add_library(libcaf_core_static STATIC ${LIBCAF_CORE_HDRS} ${LIBCAF_CORE_SRCS})
   target_link_libraries(libcaf_core_static ${LD_FLAGS})
   set_target_properties(libcaf_core_static PROPERTIES OUTPUT_NAME caf_core_static)
-  if(NOT WIN32)
-    install(TARGETS libcaf_core_static ARCHIVE DESTINATION lib)
-  endif()
+  install(TARGETS libcaf_core_static ARCHIVE DESTINATION lib)
   add_dependencies(libcaf_core_static libcaf_core)
 endif ()
 
diff --git a/libcaf_core/caf/config.hpp b/libcaf_core/caf/config.hpp
index 1712983..2292d29 100644
--- a/libcaf_core/caf/config.hpp
+++ b/libcaf_core/caf/config.hpp
@@ -23,6 +23,26 @@
 // this header must be generated by the build system (may be empty)
 #include "caf/detail/build_config.hpp"
 
+// Introduce a CAF_API define to properly export global variables when building a shared library on Windows
+// (Other Symbols are handled automatically by CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS)
+#if defined(CAF_CORE_BUILD_SHARED)
+#  if defined(CAF_CORE_EXPORTS)
+#    if defined(_MSC_VER)
+#      define CAF_API __declspec(dllexport)
+#    else
+#      define CAF_API
+#    endif
+#  else
+#    if defined(_MSC_VER)
+#      define CAF_API __declspec(dllimport)
+#    else
+#      define CAF_API
+#    endif
+#  endif
+#else
+#  define CAF_API
+#endif
+
 // Platform-specific adjustments.
 #define CAF_CACHE_LINE_SIZE 64
 
diff --git a/libcaf_core/caf/config_option.hpp b/libcaf_core/caf/config_option.hpp
index 62730c4..6ec6d1b 100644
--- a/libcaf_core/caf/config_option.hpp
+++ b/libcaf_core/caf/config_option.hpp
@@ -39,7 +39,7 @@
 
 namespace caf {
 
-extern const char* type_name_visitor_tbl[];
+CAF_API extern const char* type_name_visitor_tbl[];
 
 /// Helper class to generate config readers for different input types.
 class config_option {
diff --git a/libcaf_core/caf/type_nr.hpp b/libcaf_core/caf/type_nr.hpp
index 4ff7735..c95ec63 100644
--- a/libcaf_core/caf/type_nr.hpp
+++ b/libcaf_core/caf/type_nr.hpp
@@ -26,6 +26,7 @@
 #include <vector>
 #include <cstdint>
 
+#include "caf/config.hpp"
 #include "caf/fwd.hpp"
 #include "caf/atom.hpp"
 #include "caf/timestamp.hpp"
@@ -109,7 +110,7 @@ static constexpr size_t type_nrs = detail::tl_size<sorted_builtin_types>::value
                                    + 1;
 
 /// List of all type names, indexed via `type_nr`.
-extern const char* numbered_type_names[];
+CAF_API extern const char* numbered_type_names[];
 
 template <uint32_t R, uint16_t... Is>
 struct type_token_helper;
diff --git a/libcaf_core/src/config_option.cpp b/libcaf_core/src/config_option.cpp
index 3351ba6..24597f0 100644
--- a/libcaf_core/src/config_option.cpp
+++ b/libcaf_core/src/config_option.cpp
@@ -23,7 +23,7 @@
 
 namespace caf {
 
-const char* type_name_visitor_tbl[] {
+CAF_API const char* type_name_visitor_tbl[] {
   "a boolean", 
   "a float", 
   "a double",
diff --git a/libcaf_core/src/uniform_type_info_map.cpp b/libcaf_core/src/uniform_type_info_map.cpp
index e1a2754..831bd9d 100644
--- a/libcaf_core/src/uniform_type_info_map.cpp
+++ b/libcaf_core/src/uniform_type_info_map.cpp
@@ -52,7 +52,7 @@
 
 namespace caf {
 
-const char* numbered_type_names[] = {
+CAF_API const char* numbered_type_names[] = {
   "@actor",
   "@actorvec",
   "@addr",
diff --git a/libcaf_io/CMakeLists.txt b/libcaf_io/CMakeLists.txt
index d93bad1..091b1d8 100644
--- a/libcaf_io/CMakeLists.txt
+++ b/libcaf_io/CMakeLists.txt
@@ -39,11 +39,11 @@ if (NOT CAF_BUILD_STATIC_ONLY)
                         SOVERSION ${CAF_VERSION}
                         VERSION ${CAF_VERSION}
                         OUTPUT_NAME caf_io)
-  if (CYGWIN)
-    install(TARGETS libcaf_io_shared RUNTIME DESTINATION bin)
-  elseif (NOT WIN32)
-    install(TARGETS libcaf_io_shared LIBRARY DESTINATION lib)
-  endif()
+  install(TARGETS libcaf_io_shared
+    RUNTIME DESTINATION bin
+    LIBRARY DESTINATION lib
+    ARCHIVE DESTINATION lib
+  )
   add_dependencies(libcaf_io_shared libcaf_io)
 endif ()
 
@@ -52,9 +52,7 @@ if (CAF_BUILD_STATIC_ONLY OR CAF_BUILD_STATIC)
   add_library(libcaf_io_static STATIC ${LIBCAF_IO_HDRS} ${LIBCAF_IO_SRCS})
   target_link_libraries(libcaf_io_static ${LD_FLAGS} ${CAF_LIBRARY_CORE_STATIC})
   set_target_properties(libcaf_io_static PROPERTIES OUTPUT_NAME caf_io_static)
-  if(NOT WIN32)
-    install(TARGETS libcaf_io_static ARCHIVE DESTINATION lib)
-  endif()
+  install(TARGETS libcaf_io_static ARCHIVE DESTINATION lib)
   add_dependencies(libcaf_io_static libcaf_io)
 endif ()
 
